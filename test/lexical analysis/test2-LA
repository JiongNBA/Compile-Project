/* ----------------------------------------------------------
 * file: test2.c
 * author: Haofeng Yang 3190105301@zju.edu.cn
 * 		   Yuesong Wang 3190105303@zju.edu.cn
 * 		   Jiong   Li 	3190105725@zju.edu.cn
 * ----------------------------------------------------------
 * function: calculate the product of two matrices
 * description: calculating the product of two matrices
 * ----------------------------------------------------------
 * create date:   2022/4/15 3:12 pm
 * last modified: 2022/4/15 3:34 pm
 * ----------------------------------------------------------
 * history: 2022/4/15 3:12 pm create the file
 *          2022/4/15 3:34 pm finish the codes
 */

// #include<stdio.h>

[WHITESPACE] int[INT]  [WHITESPACE] main[ID] ([LEFT_PAR] void[VOID] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
	[WHITESPACE] int[INT]  [WHITESPACE] Matrix_A[ID] [[LEFT_SQUARE] 25[INT_VAL] ][RIGHT_SQUARE] [[LEFT_SQUARE] 25[INT_VAL] ][RIGHT_SQUARE] ;[SEMICOLON] 
	[WHITESPACE] int[INT]  [WHITESPACE] Matrix_B[ID] [[LEFT_SQUARE] 25[INT_VAL] ][RIGHT_SQUARE] [[LEFT_SQUARE] 25[INT_VAL] ][RIGHT_SQUARE] ;[SEMICOLON] 
	[WHITESPACE] int[INT]  [WHITESPACE] Ma[ID] ,[COMMA] Mb[ID] ,[COMMA] Na[ID] ,[COMMA] Nb[ID] ;[SEMICOLON] 

	[WHITESPACE] scanf[ID] ([LEFT_PAR] "%d %d"[LITERAL] ,[COMMA] &[ADDR] Ma[ID] ,[COMMA] &[ADDR] Na[ID] )[RIGHT_PAR] ;[SEMICOLON]  // input the column and row of 1st matrix
	[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Ma[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL]  [WHITESPACE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY]  // input the data of 1st matrix
		[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Na[ID] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] j[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL]  [WHITESPACE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
			[WHITESPACE] scanf[ID] ([LEFT_PAR] "%d"[LITERAL] ,[COMMA] &[ADDR] Matrix_A[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE] )[RIGHT_PAR] ;[SEMICOLON] 
		[WHITESPACE] }[RIGHT_CURLY] 
	[WHITESPACE] }[RIGHT_CURLY] 

	[WHITESPACE] scanf[ID] ([LEFT_PAR] "%d %d"[LITERAL] ,[COMMA] &[ADDR] Mb[ID] ,[COMMA] &[ADDR] Nb[ID] )[RIGHT_PAR] ;[SEMICOLON]  // input the column and row of 2nd matrix
	[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Mb[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY]  // input the data of 2nd matrix
		[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Nb[ID] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] j[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
			[WHITESPACE] scanf[ID] ([LEFT_PAR] "%d"[LITERAL] ,[COMMA] &[ADDR] Matrix_B[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE] )[RIGHT_PAR] ;[SEMICOLON] 
		[WHITESPACE] }[RIGHT_CURLY] 
	[WHITESPACE] }[RIGHT_CURLY] 

	[WHITESPACE] if[IF] ([LEFT_PAR] Na[ID]  [WHITESPACE] !=[UEQUAL]  [WHITESPACE] Mb[ID] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 	// if the 1st matrix's column is not equal to the 2nd's row
		[WHITESPACE] printf[ID] ([LEFT_PAR] "Incompatible Dimensions\n"[LITERAL] )[RIGHT_PAR] ;[SEMICOLON]  // output error message
		[WHITESPACE] return[RETURN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON] 
	[WHITESPACE] }[RIGHT_CURLY] 

	[WHITESPACE] int[INT]  [WHITESPACE] Mc[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] Ma[ID] ;[SEMICOLON] 
	[WHITESPACE] int[INT]  [WHITESPACE] Nc[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] Nb[ID] ;[SEMICOLON] 
	[WHITESPACE] int[INT]  [WHITESPACE] sum[ID]  [WHITESPACE] ;[SEMICOLON] 
	[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Mc[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
		[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Nc[ID] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] j[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY]  //calculate every element of the target matrix
			[WHITESPACE] sum[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON] 
			[WHITESPACE] for[FOR] ([LEFT_PAR] int[INT]  [WHITESPACE] k[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] k[ID]  [WHITESPACE] <[LS]  [WHITESPACE] Na[ID] ;[SEMICOLON]  [WHITESPACE] k[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] k[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] {[LEFT_CURLY] 
				[WHITESPACE] sum[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] sum[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] Matrix_A[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] [[LEFT_SQUARE] k[ID] ][RIGHT_SQUARE] *[MUL] Matrix_B[ID] [[LEFT_SQUARE] k[ID] ][RIGHT_SQUARE] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE] ;[SEMICOLON] 
			[WHITESPACE] }[RIGHT_CURLY] 
			[WHITESPACE] printf[ID] ([LEFT_PAR] "%10d"[LITERAL] ,[COMMA] sum[ID] )[RIGHT_PAR] ;[SEMICOLON]  // output the result
		[WHITESPACE] }[RIGHT_CURLY] 
		[WHITESPACE] printf[ID] ([LEFT_PAR] "\n"[LITERAL] )[RIGHT_PAR] ;[SEMICOLON] 
	[WHITESPACE] }[RIGHT_CURLY] 

	[WHITESPACE] return[RETURN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON] 
[WHITESPACE] }[RIGHT_CURLY] 
[WHITESPACE] 