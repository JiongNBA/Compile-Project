/* ----------------------------------------------------------
 * file: test1.c
 * author: Haofeng Yang 3190105301@zju.edu.cn
 * ----------------------------------------------------------
 * function: sort the input integer and print sorted integer
 * description: quick sort based on the algorithm in
 *              Data Structure And Algorithm Analysis in C
 * ----------------------------------------------------------
 * create date: 2022/4/15 2:13 pm
 * last modified: 2022/4/15 2:53 pm
 * ----------------------------------------------------------
 * history: 2022/4/15 2:13 pm create the file
 *          2022/4/15 2:53 pm finish the codes
 */

//#include <stdio.h>

// swap the location of A and B
// :param arr: array
// :param pos1: index of the 1st integer
// :param pos2: index of the 2nd integer
[WHITESPACE] void[VOID]  [WHITESPACE] swap[ID] ([LEFT_PAR] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] ][RIGHT_SQUARE] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] pos1[ID] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] pos2[ID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
	[WHITESPACE] int[INT]  [WHITESPACE] temp[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] pos1[ID] ][RIGHT_SQUARE] ;[SEMICOLON] 
	[WHITESPACE] arr[ID] [[LEFT_SQUARE] pos1[ID] ][RIGHT_SQUARE]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] pos2[ID] ][RIGHT_SQUARE] ;[SEMICOLON] 
	[WHITESPACE] arr[ID] [[LEFT_SQUARE] pos2[ID] ][RIGHT_SQUARE]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] temp[ID] ;[SEMICOLON] 
[WHITESPACE] }[RIGHT_CURLY] 

// Insertion Sort
// :param arr: array to sort
// :param N: number of integers to sort
[WHITESPACE] void[VOID]  [WHITESPACE] InsertionSort[ID] ([LEFT_PAR] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] ][RIGHT_SQUARE] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] N[ID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
    [WHITESPACE] int[INT]  [WHITESPACE] temp[ID] ;[SEMICOLON] 
    [WHITESPACE] int[INT]  [WHITESPACE] i[ID] ,[COMMA]  [WHITESPACE] j[ID] ;[SEMICOLON] 

    [WHITESPACE] for[FOR]  [WHITESPACE] ([LEFT_PAR] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 1[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] N[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY]  // from the 2nd to last
        [WHITESPACE] temp[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] ;[SEMICOLON]   // record arr[i] to insert eventually
        [WHITESPACE] for[FOR]  [WHITESPACE] ([LEFT_PAR] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] >[GR]  [WHITESPACE] 0[INT_VAL]  [WHITESPACE] &&[AND]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] j[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] ][RIGHT_SQUARE]  [WHITESPACE] >[GR]  [WHITESPACE] temp[ID] ;[SEMICOLON]  [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] j[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
            [WHITESPACE] arr[ID] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] j[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] ][RIGHT_SQUARE] ;[SEMICOLON]  // move backward to make room for i
        [WHITESPACE] }[RIGHT_CURLY] 
        [WHITESPACE] arr[ID] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] temp[ID] ;[SEMICOLON]  // find place of i
    [WHITESPACE] }[RIGHT_CURLY] 
[WHITESPACE] }[RIGHT_CURLY] 

// sort Left, Center and Right, move pivot and return
// :param arr: array
// :param Left: leftmost position
// :param right: rightmost position
// :return choosed pivot
[WHITESPACE] int[INT]  [WHITESPACE] Median3[ID] ([LEFT_PAR] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] ][RIGHT_SQUARE] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] Right[ID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
    [WHITESPACE] int[INT]  [WHITESPACE] Center[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] ([LEFT_PAR] Left[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] Right[ID] )[RIGHT_PAR]  [WHITESPACE] /[DIV]  [WHITESPACE] 2[INT_VAL] ;[SEMICOLON] 

    [WHITESPACE] if[IF]  [WHITESPACE] ([LEFT_PAR] arr[ID] [[LEFT_SQUARE] Left[ID] ][RIGHT_SQUARE]  [WHITESPACE] >[GR]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] Center[ID] ][RIGHT_SQUARE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
        [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] Center[ID] )[RIGHT_PAR] ;[SEMICOLON]   // now Left < Center
    [WHITESPACE] }[RIGHT_CURLY] 
    [WHITESPACE] if[IF]  [WHITESPACE] ([LEFT_PAR] arr[ID] [[LEFT_SQUARE] Left[ID] ][RIGHT_SQUARE]  [WHITESPACE] >[GR]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] Right[ID] ][RIGHT_SQUARE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
        [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] Right[ID] )[RIGHT_PAR] ;[SEMICOLON]    // now Left < Right
    [WHITESPACE] }[RIGHT_CURLY] 
    [WHITESPACE] if[IF]  [WHITESPACE] ([LEFT_PAR] arr[ID] [[LEFT_SQUARE] Center[ID] ][RIGHT_SQUARE]  [WHITESPACE] >[GR]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] Right[ID] ][RIGHT_SQUARE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY]  
        [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Center[ID] ,[COMMA]  [WHITESPACE] Right[ID] )[RIGHT_PAR] ;[SEMICOLON]  // now Center < Right
    [WHITESPACE] }[RIGHT_CURLY] 
    [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Center[ID] ,[COMMA]  [WHITESPACE] Right[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] ;[SEMICOLON]  // move Center/pivot
    [WHITESPACE] return[RETURN]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] Right[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] ][RIGHT_SQUARE] ;[SEMICOLON]  // return pivot
[WHITESPACE] }[RIGHT_CURLY] 

// sort Left and Right section of pivot and conduct recursion
// :param arr: array to sort
// :param: Left: leftmost position to sort
// :param: Right: rightmost position to sort
[WHITESPACE] void[VOID]  [WHITESPACE] QSort[ID] ([LEFT_PAR] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] ][RIGHT_SQUARE] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] Right[ID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
    [WHITESPACE] int[INT]  [WHITESPACE] i[ID] ,[COMMA]  [WHITESPACE] j[ID] ;[SEMICOLON] 
    [WHITESPACE] int[INT]  [WHITESPACE] Pivot[ID] ;[SEMICOLON] 

    [WHITESPACE] if[IF]  [WHITESPACE] ([LEFT_PAR] Left[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 3[INT_VAL]  [WHITESPACE] <=[LE]  [WHITESPACE] Right[ID] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
        [WHITESPACE] Pivot[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] Median3[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] Right[ID] )[RIGHT_PAR] ;[SEMICOLON]  // get pivot
        [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] Left[ID] ;[SEMICOLON] 
        [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] Right[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] ;[SEMICOLON] 
        [WHITESPACE] while[WHILE]  [WHITESPACE] ([LEFT_PAR] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
            // stop until >= Pivot
            [WHITESPACE] while[WHILE]  [WHITESPACE] ([LEFT_PAR] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
                [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] ;[SEMICOLON] 
                [WHITESPACE] if[IF] ([LEFT_PAR] Pivot[ID]  [WHITESPACE] <=[LE]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
                    [WHITESPACE] break[BREAK] ;[SEMICOLON] 
                [WHITESPACE] }[RIGHT_CURLY] 
            [WHITESPACE] }[RIGHT_CURLY] 
            // stop until <= Pivot
            [WHITESPACE] while[WHILE]  [WHITESPACE] ([LEFT_PAR] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
                [WHITESPACE] j[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] j[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] ;[SEMICOLON] 
                [WHITESPACE] if[IF] ([LEFT_PAR] arr[ID] [[LEFT_SQUARE] j[ID] ][RIGHT_SQUARE]  [WHITESPACE] <=[LE]  [WHITESPACE] Pivot[ID] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
                    [WHITESPACE] break[BREAK] ;[SEMICOLON] 
                [WHITESPACE] }[RIGHT_CURLY] 
            [WHITESPACE] }[RIGHT_CURLY] 

            [WHITESPACE] if[IF]  [WHITESPACE] ([LEFT_PAR] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] j[ID] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
                [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] i[ID] ,[COMMA]  [WHITESPACE] j[ID] )[RIGHT_PAR] ;[SEMICOLON]  // so arr[i] <= Pivot <= arr[j]
            [WHITESPACE] }[RIGHT_CURLY] 
            [WHITESPACE] else[ELSE]  [WHITESPACE] {[LEFT_CURLY] 
                [WHITESPACE] break[BREAK] ;[SEMICOLON]   // finish
            [WHITESPACE] }[RIGHT_CURLY] 
        [WHITESPACE] }[RIGHT_CURLY] 
        [WHITESPACE] swap[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] i[ID] ,[COMMA]  [WHITESPACE] Right[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] ;[SEMICOLON]  // move pivot to correct position

        [WHITESPACE] QSort[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] i[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] ;[SEMICOLON]     // sort left section
        [WHITESPACE] QSort[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] ,[COMMA]  [WHITESPACE] Right[ID] )[RIGHT_PAR] ;[SEMICOLON]    // sort right section
    [WHITESPACE] }[RIGHT_CURLY] 
    [WHITESPACE] else[ELSE]  [WHITESPACE] {[LEFT_CURLY]  // length is too short, InsertionSort is faster
        [WHITESPACE] InsertionSort[ID] ([LEFT_PAR] arr[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] Left[ID] ,[COMMA]  [WHITESPACE] Right[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] Left[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] ;[SEMICOLON] 
    [WHITESPACE] }[RIGHT_CURLY] 
[WHITESPACE] }[RIGHT_CURLY] 

// start Quick Sort
// :param arr: array to sort
// :param N: range to sort
[WHITESPACE] void[VOID]  [WHITESPACE] QuickSort[ID] ([LEFT_PAR] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] ][RIGHT_SQUARE] ,[COMMA]  [WHITESPACE] int[INT]  [WHITESPACE] N[ID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
    [WHITESPACE] QSort[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] 0[INT_VAL] ,[COMMA]  [WHITESPACE] N[ID]  [WHITESPACE] -[SUB]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR] ;[SEMICOLON] 
[WHITESPACE] }[RIGHT_CURLY] 

[WHITESPACE] int[INT]  [WHITESPACE] main[ID] ([LEFT_PAR] void[VOID] )[RIGHT_PAR] 
[WHITESPACE] {[LEFT_CURLY] 
    [WHITESPACE] int[INT]  [WHITESPACE] N[ID] ;[SEMICOLON]  // # of number
    [WHITESPACE] int[INT]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] 10000[INT_VAL] ][RIGHT_SQUARE] ;[SEMICOLON]  // arr of input number

    // read input
    [WHITESPACE] scanf[ID] ([LEFT_PAR] "%d"[LITERAL] ,[COMMA]  [WHITESPACE] &[ADDR] N[ID] )[RIGHT_PAR] ;[SEMICOLON] 
    [WHITESPACE] for[FOR]  [WHITESPACE] ([LEFT_PAR] int[INT]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] N[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
        [WHITESPACE] scanf[ID] ([LEFT_PAR] "%d"[LITERAL] ,[COMMA]  [WHITESPACE] &[ADDR] ([LEFT_PAR] arr[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] )[RIGHT_PAR] )[RIGHT_PAR] ;[SEMICOLON] 
    [WHITESPACE] }[RIGHT_CURLY] 

    // sort
    [WHITESPACE] QuickSort[ID] ([LEFT_PAR] arr[ID] ,[COMMA]  [WHITESPACE] N[ID] )[RIGHT_PAR] ;[SEMICOLON] 

    // output
    [WHITESPACE] for[FOR]  [WHITESPACE] ([LEFT_PAR] int[INT]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] <[LS]  [WHITESPACE] N[ID] ;[SEMICOLON]  [WHITESPACE] i[ID]  [WHITESPACE] =[ASSIGN]  [WHITESPACE] i[ID]  [WHITESPACE] +[ADD]  [WHITESPACE] 1[INT_VAL] )[RIGHT_PAR]  [WHITESPACE] {[LEFT_CURLY] 
        [WHITESPACE] printf[ID] ([LEFT_PAR] "%d\n"[LITERAL] ,[COMMA]  [WHITESPACE] arr[ID] [[LEFT_SQUARE] i[ID] ][RIGHT_SQUARE] )[RIGHT_PAR] ;[SEMICOLON] 
    [WHITESPACE] }[RIGHT_CURLY] 

    [WHITESPACE] return[RETURN]  [WHITESPACE] 0[INT_VAL] ;[SEMICOLON] 
[WHITESPACE] }[RIGHT_CURLY] 